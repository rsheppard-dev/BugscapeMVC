@model BugscapeMVC.Models.ViewModels.DashboardViewModel

@using Microsoft.AspNetCore.Identity
@using BugscapeMVC.Services.Interfaces
@using BugscapeMVC.Models.Enums

@inject UserManager<AppUser> UserManager
@inject IProjectService ProjectService

@{
    ViewData["Title"] = "Dashboard";
    AppUser? user = await UserManager.GetUserAsync(User);

    var ticketsData = Newtonsoft.Json.JsonConvert.SerializeObject(Model.ChartData?.Data);
}

<section class="grid grid-cols-12 justify-between gap-4 mb-6">
    <a asp-action="Index" asp-controller="Projects"
        class="rounded-lg bg-info px-4 py-2 flex justify-between items-center gap-2 w-full col-span-6 xl:col-span-3">
        <div class="flex flex-col gap-1 font-dark">
            <span class="font-rockwell text-4xl">@Model.Projects?.Where(p => p.StartDate < DateTime.Now && p.EndDate >
                DateTime.Now).Count()</span>
            <span class="font-lato text-sm">Active Projects</span>
        </div>
        <div class="w-14">
            <img src="~/images/default-projects.png" alt="Active Projects">
        </div>
    </a>

    <a asp-action="Index" asp-controller="Tickets"
        class="rounded-lg bg-success px-4 py-2 flex justify-between items-center gap-2 w-full col-span-6 xl:col-span-3">
        <div class="flex flex-col gap-1 font-dark">
            <span class="font-rockwell text-4xl">@Model.Tickets?.Count()</span>
            <span class="font-lato text-sm">Open Tickets</span>
        </div>
        <div class="w-14">
            <img src="~/images/default-tickets.png" alt="Open Tickets">
        </div>
    </a>

    <a asp-action="@(User.IsInRole(nameof(Roles.Admin)) ? "UnassignedTickets" : "Index")" asp-controller="Tickets"
        class="rounded-lg bg-warning px-4 py-2 flex justify-between items-center gap-2 w-full col-span-6 xl:col-span-3">
        <div class="flex flex-col gap-1 font-dark">
            <span class="font-rockwell text-4xl">@Model.Tickets?.Where(t =>
                string.IsNullOrEmpty(t.DeveloperUserId)).Count()</span>
            <span class="font-lato text-sm">Unassigned Tickets</span>
        </div>
        <div class="w-14">
            <img src="~/images/unassigned-tickets.png" alt="Unassigned Tickets">
        </div>
    </a>

    <a asp-action="Index" asp-controller="Members"
        class="rounded-lg bg-danger px-4 py-2 flex justify-between items-center gap-2 w-full col-span-6 xl:col-span-3">
        <div class="flex flex-col gap-1 font-dark">
            <span class="font-rockwell text-4xl">@Model.Company?.Members.Count()</span>
            <span class="font-lato text-sm">Team Members</span>
        </div>
        <div class="w-14">
            <img src="~/images/default-team.png" alt="Team Members">
        </div>
    </a>
</section>

<div class="grid grid-cols-12 gap-6 mb-6">
    @if (Model.Tickets?.Count > 0)
    {
        <section class="col-span-12 lg:col-span-4 rounded-md bg-white px-6 py-3 flex flex-col lg:order-2">
            <h2 class="font-rockwell text-dark text-xl font-bold mb-4">Tickets By Priority</h2>
            <div class="h-full flex items-center justify-center">
                <canvas data-chart="tickets by priority"></canvas>
            </div>
        </section>
    }

    @if (Model.Tickets?.Count > 0)
    {
        <section class="col-span-12 lg:col-span-8 rounded-md bg-white px-6 py-3 flex flex-col lg:order-1">
            <h2 class="font-rockwell text-dark text-xl font-bold">Tickets Resolved</h2>
            <span class="block font-lato text-gray-400 mb-4">Last 30 Days</span>
            <div class="h-full flex justify-center items-center">
                <canvas data-chart="tickets resolved"></canvas>
            </div>
        </section>
    }

    <section class="col-span-12 lg:col-span-8 rounded-md bg-white px-6 py-3 flex flex-col lg:order-3">
        <div class="flex justify-between items-center mb-6">
            <h2 class="font-rockwell text-dark text-xl font-bold">Projects</h2>

            <a asp-action="Index" asp-controller="Projects" title="Projects"
                class="bg-mid px-4 py-2 text-dark rounded-lg flex items-center gap-2 group">
                <span class="font-lato text-sm">@Model.Projects?.Count</span>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                    stroke="currentColor" class="w-4 h-4 group-hover:translate-x-1 transition-transform">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
                </svg>
            </a>
        </div>

        @if (Model.Projects is null || Model.Projects?.Count == 0)
        {
            <p class="font-lato flex flex-col gap-4 grow">There are currently no projects to show.</p>
        }
        else
        {
            <div data-container="projects" class="grow relative overflow-x-auto rounded-t-lg scrollbar-thin scrollbar-thumb-light scrollbar-track-white">
            </div>
        }

        @if (User.IsInRole(nameof(Roles.Admin)))
        {
            <div>
                <hr class="my-4 h-[2px] rounded bg-mid border-0" />

                <a asp-action="Create" asp-controller="Projects" class="flex items-center gap-2 w-fit group">
                    <div
                        class="bg-success group-hover:bg-opacity-80 transition-opacity flex items-center justify-center rounded-full p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" class="fill-white h-4 w-4">
                            <path id="Icon_awesome-plus" data-name="Icon awesome-plus"
                                d="M18.571,10.107H12.143V3.679A1.429,1.429,0,0,0,10.714,2.25H9.286A1.429,1.429,0,0,0,7.857,3.679v6.429H1.429A1.429,1.429,0,0,0,0,11.536v1.429a1.429,1.429,0,0,0,1.429,1.429H7.857v6.429A1.429,1.429,0,0,0,9.286,22.25h1.429a1.429,1.429,0,0,0,1.429-1.429V14.393h6.429A1.429,1.429,0,0,0,20,12.964V11.536A1.429,1.429,0,0,0,18.571,10.107Z"
                                transform="translate(0 -2.25)" />
                        </svg>
                    </div>
                    <span class="font-lato font-bold text-sm">Create new project</span>
                </a>
            </div>
        }
    </section>

    <section class="col-span-12 rounded-md bg-white px-6 py-3 flex flex-col lg:order-5">
        <div class="flex justify-between items-center mb-6">
            <h2 class="font-rockwell text-dark text-xl font-bold">Tickets</h2>

            <a asp-action="Index" asp-controller="Tickets" title="Tickets"
                class="bg-mid px-4 py-2 text-dark rounded-lg flex items-center gap-2 group">
                <span class="font-lato text-sm">@Model.Tickets?.Count</span>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                    stroke="currentColor" class="w-4 h-4 group-hover:translate-x-1 transition-transform">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
                </svg>
            </a>
        </div>

        @if (Model.Tickets is null || Model.Tickets.Count == 0)
        {
            <p class="font-lato flex flex-col gap-4 grow">There are currently no tickets to show.</p>
        }
        else
        {
            <div data-container="tickets" class="grow relative overflow-x-auto rounded-t-lg scrollbar-thin scrollbar-thumb-light scrollbar-track-white">
            </div>
        }

        <div>
            <hr class="my-4 h-[2px] rounded bg-mid border-0" />

            <a asp-action="Create" asp-controller="Tickets" class="flex items-center gap-2 w-fit group">
                <div
                    class="bg-success group-hover:bg-opacity-80 transition-opacity flex items-center justify-center rounded-full p-2">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" class="fill-white h-4 w-4">
                        <path id="Icon_awesome-plus" data-name="Icon awesome-plus"
                            d="M18.571,10.107H12.143V3.679A1.429,1.429,0,0,0,10.714,2.25H9.286A1.429,1.429,0,0,0,7.857,3.679v6.429H1.429A1.429,1.429,0,0,0,0,11.536v1.429a1.429,1.429,0,0,0,1.429,1.429H7.857v6.429A1.429,1.429,0,0,0,9.286,22.25h1.429a1.429,1.429,0,0,0,1.429-1.429V14.393h6.429A1.429,1.429,0,0,0,20,12.964V11.536A1.429,1.429,0,0,0,18.571,10.107Z"
                            transform="translate(0 -2.25)" />
                    </svg>
                </div>
                <span class="font-lato font-bold text-sm">Submit new ticket</span>
            </a>
        </div>
    </section>

    <section class="col-span-12 lg:col-span-4 rounded-md bg-white py-3 flex flex-col lg:order-4">
        @{
            ViewBag.SectionTitle = "Team";
        }
        <partial name="_TeamMembersPartial" model="@Model.Members" />
    </section>
</div>

@section scripts {
    <script src="~/js/projectsTable.js"></script>
    <script src="~/js/ticketsTable.js"></script>

    <script>
        const ticketsTable = new TicketsTable(@Html.Raw(Json.Serialize(Model.Tickets)));
        const projectsTable = new ProjectsTable(@Html.Raw(Json.Serialize(Model.Projects)));

        ticketsTable.init();
        projectsTable.init();
    </script>

    <!-- *** Begin Chart JS Pie/Donut *** -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.0/chart.umd.min.js"
        integrity="sha512-SIMGYRUjwY8+gKg7nn9EItdD8LCADSDfJNutF9TPrvEo86sQmFMh6MyralfIyhADlajSxqc7G0gs7+MwWF/ogQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        const ticketsByPriority = document.querySelector('[data-chart="tickets by priority"]');
        const ticketsResolved = document.querySelector('[data-chart="tickets resolved"]');

        new Chart(ticketsByPriority, {
            type: 'doughnut',
            data: {
                labels: [
                    '@nameof(Priorities.Low)',
                    '@nameof(Priorities.Medium)',
                    '@nameof(Priorities.High)',
                    '@nameof(Priorities.Urgent)'
                ],
                datasets: [{
                    label: 'Tickets By Priority',
                    data: [
        @Model.Tickets?.Where(ticket => ticket.TicketPriority?.Name == nameof(Priorities.Low)).Count(),
        @Model.Tickets?.Where(ticket => ticket.TicketPriority?.Name == nameof(Priorities.Medium)).Count(),
        @Model.Tickets?.Where(ticket => ticket.TicketPriority?.Name == nameof(Priorities.High)).Count(),
        @Model.Tickets?.Where(ticket => ticket.TicketPriority?.Name == nameof(Priorities.Urgent)).Count(),
                    ],
                    backgroundColor: [
                        '#0AD69F',
                        '#00B4D8',
                        '#FFD166',
                        '#EF476F'
                    ],
                    hoverOffset: 4
                }]
            },
            options: {
                plugins: {
                    legend: {
                        position: 'bottom', // Place the legend at the bottom
                        labels: {
                            usePointStyle: true, // Display legend keys as circles
                        },
                    },
                },
            },
        });

        const ticketsData = @Html.Raw(ticketsData);
        const today = new Date();
        const days = [];
        const dataSubmitted = [];
        const dataResolved = [];

        // Generate data for the last 30 days, starting from today and going backward
        for (let i = 29; i >= 0; i--) {
            const date = new Date(today);
            date.setDate(today.getDate() - i); // Calculate the date for each day

            // Format the date as desired (e.g., 'Sep 01')
            const formattedDate = date.toLocaleString('default', { month: 'short', day: '2-digit' });

            // Push the formatted date to the labels array
            days.push(formattedDate);

            // Find the data for this date
            const dataForThisDate = ticketsData.find(d => new Date(d.Date).toDateString() === date.toDateString());
           
            // If data for this date exists, push it to the dataSubmitted array
            if (dataForThisDate) {
                dataSubmitted.push(dataForThisDate.TicketsSubmitted);
                dataResolved.push(dataForThisDate.TicketsResolved);
            } else {
                dataSubmitted.push(0);
                dataResolved.push(0);
            }
        }

        console.log(dataResolved)

        new Chart(ticketsResolved, {
            type: 'line',
            data: {
                labels: days,
                datasets: [
                    {
                        label: 'Tickets Submitted',
                        data: dataSubmitted,
                        borderColor: '#00B4D8',
                        tension: 0.1
                    },
                    {
                        label: 'Tickets Resolved',
                        data: dataResolved,
                        borderColor: '#0AD69F',
                        tension: 0.1
                    }
                ]
            },
            options: {
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            usePointStyle: true,
                            generateLabels: function (chart) {
                                const labels = Chart.defaults.plugins.legend.labels.generateLabels(chart);
                                labels.forEach(function (label) {
                                    const dataset = chart.data.datasets.find(d => d.label === label.text);
                                    if (dataset) {
                                        label.fillStyle = dataset.borderColor;
                                    }
                                });
                                return labels;
                            }
                        },
                    },
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Date'
                        },
                        ticks: {
                            autoSkip: true, // Automatically skip labels to avoid clutter
                            maxTicksLimit: 6 // Maximum number of labels to display (adjust as needed)
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Value'
                        },
                    }
                }
            }
        });
    </script>
}