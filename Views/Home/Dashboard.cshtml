@model BugscapeMVC.Models.ViewModels.DashboardViewModel

@using Microsoft.AspNetCore.Identity
@using BugscapeMVC.Services.Interfaces
@using BugscapeMVC.Models.Enums

@inject UserManager<AppUser> UserManager
@inject IFileService FileService
@inject IRoleService RolesService

@{
    ViewData["Title"] = "Dashboard";
    AppUser? user = await UserManager.GetUserAsync(User);
}

<!-- Styles -->
<style>
	.amDark {
		background-color: #30303d;
		color: #fff;
	}

	#chartdiv {
		width: 100%;
		height: 500px;
	}
</style>

<section class="grid grid-cols-12 justify-between gap-4 mb-6">
    <a asp-action="Index" asp-controller="Projects" class="rounded-lg bg-info px-4 py-2 flex justify-between items-center gap-2 w-full col-span-6 xl:col-span-3">
        <div class="flex flex-col gap-1 font-dark">
            <span class="font-rockwell text-4xl">@Model.Projects?.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()</span>
            <span class="font-lato text-sm">Active Projects</span>
        </div>
        <div class="w-14">
            <img src="~/images/default-projects.png" alt="Active Projects">
        </div>
    </a>

    <a asp-action="Index" asp-controller="Tickets" class="rounded-lg bg-success px-4 py-2 flex justify-between items-center gap-2 w-full col-span-6 xl:col-span-3">
        <div class="flex flex-col gap-1 font-dark">
            <span class="font-rockwell text-4xl">@Model.Tickets?.Count()</span>
            <span class="font-lato text-sm">Open Tickets</span>
        </div>
        <div class="w-14">
            <img src="~/images/default-tickets.png" alt="Open Tickets">
        </div>
    </a>

    <a asp-action="Index" asp-controller="Tickets" class="rounded-lg bg-warning px-4 py-2 flex justify-between items-center gap-2 w-full col-span-6 xl:col-span-3">
        <div class="flex flex-col gap-1 font-dark">
            <span class="font-rockwell text-4xl">@Model.Tickets?.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</span>
            <span class="font-lato text-sm">Unassigned Tickets</span>
        </div>
        <div class="w-14">
            <img src="~/images/unassigned-tickets.png" alt="Unassigned Tickets">
        </div>
    </a>

    <a asp-action="Index" asp-controller="Tickets" class="rounded-lg bg-danger px-4 py-2 flex justify-between items-center gap-2 w-full col-span-6 xl:col-span-3">
        <div class="flex flex-col gap-1 font-dark">
            <span class="font-rockwell text-4xl">@Model.Company?.Members.Count()</span>
            <span class="font-lato text-sm">Team Members</span>
        </div>
        <div class="w-14">
            <img src="~/images/default-team.png" alt="Team Members">
        </div>
    </a>
</section>

<div class="grid grid-cols-12 gap-4 mb-6">
    <section class="col-span-12 lg:col-span-8 rounded-md bg-white px-4 py-2 flex flex-col">
        <div class="flex justify-between items-center mb-6">
            <h2 class="font-rockwell text-dark text-xl font-bold">Projects</h2>
            
            <a asp-action="Index" asp-controller="Projects" class="bg-mid px-4 py-2 text-dark rounded-lg flex items-center gap-2 group">
                <span class="font-lato text-sm">@Model.Projects?.Count</span>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 group-hover:translate-x-1 transition-transform">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
                </svg>
            </a>
        </div>

        @if (Model.Projects is null || Model.Projects?.Count == 0)
        {
            <p class="font-lato flex flex-col gap-4 grow">There are currently no projects to show.</p>
        }
        else
        {        
        <div class="grow relative overflow-x-auto rounded-t-lg scrollbar-thin scrollbar-thumb-light scrollbar-track-white">
            <table class="w-full text-sm text-left text-dark font-lato">
                <thead class="text-xs bg-light uppercase">
                    <tr>
                        <th scope="col" class="px-6 py-3 whitespace-nowrap">
                            Name
                        </th>
                        <th scope="col" class="px-6 py-3 whitespace-nowrap">
                            Start Date
                        </th>
                        <th scope="col" class="px-6 py-3 whitespace-nowrap">
                            End Date
                        </th>
                        <th scope="col" class="px-6 py-3 whitespace-nowrap">
                            Priority
                        </th>
                        <th scope="col" class="px-6 py-3 whitespace-nowrap">
                            Action
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int rowNumber = 0;
                    }

                    @foreach (Project project in Model.Projects!.OrderBy(project => project.EndDate))
                    {
                        string rowColor = rowNumber % 2 == 0 ? "bg-lightest" : "bg-mid"; // Define row colors based on the counter.
                        rowNumber++;
                    
                    <tr class="@rowColor border-b">
                        <th scope="row" class="px-6 py-4 whitespace-nowrap">
                            @project.Name
                        </th>
                        <td class="px-6 py-4">
                            @project.StartDate.ToString("dd.MM.yyyy")
                        </td>
                        <td class="px-6 py-4">
                            @project.EndDate.ToString("dd.MM.yyyy")
                        </td>
                        <td class="px-6 py-4">
                            @{
                                string badgeClass = "bg-danger";

                                switch (project.ProjectPriority?.Name)
                                {
                                    case nameof(Priorities.Urgent):
                                        badgeClass = "bg-danger";
                                        break;
                                    case nameof(Priorities.High):
                                        badgeClass = "bg-warning";
                                        break;
                                    case nameof(Priorities.Medium):
                                        badgeClass = "bg-info";
                                        break;
                                    default:
                                        badgeClass = "bg-success";
                                        break;
                                }
                            }
                            <span class="uppercase px-2 py-1 @badgeClass rounded-md text-xs font-bold">@project.ProjectPriority?.Name</span>
                        </td>
                        <td class="px-6 py-4">
                            <a asp-action="Details" asp-controller="Projects" asp-route-id="@project.Id">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.75a.75.75 0 110-1.5.75.75 0 010 1.5zM12 12.75a.75.75 0 110-1.5.75.75 0 010 1.5zM12 18.75a.75.75 0 110-1.5.75.75 0 010 1.5z" />
                                </svg>
                            </a>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
        }

        @if (User.IsInRole(nameof(Roles.Admin)))
        {
        <div>
            <hr class="my-4">

            <a asp-action="Create" asp-controller="Projects" class="flex items-center gap-2 w-fit group">
                <div class="bg-success group-hover:bg-opacity-80 transition-opacity flex items-center justify-center rounded-full p-2">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" class="fill-white h-4 w-4">
                        <path id="Icon_awesome-plus" data-name="Icon awesome-plus" d="M18.571,10.107H12.143V3.679A1.429,1.429,0,0,0,10.714,2.25H9.286A1.429,1.429,0,0,0,7.857,3.679v6.429H1.429A1.429,1.429,0,0,0,0,11.536v1.429a1.429,1.429,0,0,0,1.429,1.429H7.857v6.429A1.429,1.429,0,0,0,9.286,22.25h1.429a1.429,1.429,0,0,0,1.429-1.429V14.393h6.429A1.429,1.429,0,0,0,20,12.964V11.536A1.429,1.429,0,0,0,18.571,10.107Z" transform="translate(0 -2.25)" />
                    </svg>
                </div>
                <span class="font-lato font-bold">Create new project</span>
            </a>
        </div>
        }
    </section>

    <section class="col-span-12 lg:col-span-4 rounded-md bg-white px-4 py-2 flex flex-col">
        <div class="flex justify-between items-center mb-6">
            <h2 class="font-rockwell text-dark text-xl font-bold">Team</h2>
            
            <a asp-action="Index" asp-controller="Projects" class="bg-mid group px-4 py-2 text-dark rounded-lg flex items-center gap-2">
                <span class="font-lato text-sm">@Model.Members?.Count</span>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 group-hover:translate-x-1 transition-transform">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
                </svg>
            </a>
        </div>

        @if (Model.Members is null || Model.Members?.Count == 0)
        {
            <div class="flex flex-col gap-4 grow">
                <p class="font-lato">There are currently no team members to show.</p>
            </div>
        }
        else
        {        
            <div class="flex flex-col gap-4 grow">
                @foreach (AppUser member in Model.Members!.OrderBy(member => member.FirstName).ThenBy(member => member.LastName))
                {
                <div class="flex items-center justify-between">
                    <div class="flex items-center gap-2">
                        @if (member.AvatarFileData is null || member.AvatarContentType is null)
                        {
                            <img class="h-10 w-10 object-cover rounded-full" src="~/images/default-avatar.png" alt="@member.FullName">
                        }
                        else
                        {
                            <img class="h-10 w-10 object-cover rounded-full" src="@FileService.ConvertByteArrayToFile(member.AvatarFileData, member.AvatarContentType)" alt="@member.FullName">
                        }

                        <div class="flex flex-col">
                            <strong class="font-bold font-lato text-sm">@member.FullName</strong>
                            <span class="font-lato text-gray-400 text-xs">@((RolesService.GetUserRolesAsync(member)).Result.FirstOrDefault()?.Replace("_", " "))</span>
                        </div>
                    </div>

                    <a href="mailto:@member.Email" class="p-2 bg-mid rounded-full">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 stroke-dark">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" />
                        </svg>
                    </a>
                </div>
                }
            </div>
        }

        @if (User.IsInRole(nameof(Roles.Admin)))
        {
        <div>
            <hr class="my-4">

            <a asp-action="Create" asp-controller="Invites" class="flex items-center gap-2 w-fit group">
                <div class="bg-success group-hover:bg-opacity-80 transition-opacity flex items-center justify-center rounded-full p-2">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" class="fill-white h-4 w-4">
                        <path id="Icon_awesome-plus" data-name="Icon awesome-plus" d="M18.571,10.107H12.143V3.679A1.429,1.429,0,0,0,10.714,2.25H9.286A1.429,1.429,0,0,0,7.857,3.679v6.429H1.429A1.429,1.429,0,0,0,0,11.536v1.429a1.429,1.429,0,0,0,1.429,1.429H7.857v6.429A1.429,1.429,0,0,0,9.286,22.25h1.429a1.429,1.429,0,0,0,1.429-1.429V14.393h6.429A1.429,1.429,0,0,0,20,12.964V11.536A1.429,1.429,0,0,0,18.571,10.107Z" transform="translate(0 -2.25)" />
                    </svg>
                </div>
                <span class="font-lato font-bold">Invite new team member</span>
            </a>
        </div>
        }
    </section>
</div>

<div>
    <div classxfont-weighteighteightgetainer-fluid">
        <!-- Info Pills -->
        <div class="row mt-2">
            <div class="col-lg-3 col-md-6 col-sm-6">
                <a asp-action="AllProjects" asp-controller="Projects" style="text-decoration:none">
                    <div class="card text-center bg-info">
                        <div class="body">
                            <div class="p-15 text-light">
                                <h3>@Model.Projects?.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()</h3>
                                <span>Active Projects</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <a asp-action="AllTickets" asp-controller="Tickets" style="text-decoration:none">
                    <div class="card text-center bg-secondary">
                        <div class="body">
                            <div class="p-15 text-light">

                                <h3>@Model.Tickets?.Count()</h3>
                                <span>Total Tickets</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <div class="card text-center bg-warning">
                    <div class="body">
                        <div class="p-15 text-light">
                            <h3>@Model.Tickets?.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</h3>
                            <span>Unassigned Tickets</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <div class="card text-center bg-dark">
                    <div class="body">
                        <div class="p-15 text-light">
                            <h3>
                                @(
                                    Model.Projects?.Count()
                                    + Model.Tickets?.Count()
                                    + Model.Members?.Count()
                                    )
                            </h3>
                            <span>Total Data</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row gy-2">
            <div class="col-md-12 col">
                <div class="row col-cols-4 mt-5 bg-secondary">
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Projects by Priority</h5>
                            <div id="chart3D"></div>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Project Tickets Count (%)</h5>
                            <div id="donut"></div>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Tickets by Priority</h5>
                            <!-- Morris: Donut -->
                            <div class="col-md-12">
                                <div id="legend" class="donut-legend" style="font-size:x-small"></div>
                            </div>
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisTicketPriority"></div>
                            </div>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Tickets by Status</h5>
                            <!-- ChartJS: Pie/Doughnut -->
                            <div class="col-md-12">
                                <!--  Chart.js Canvas Tag -->
                                <canvas id="donutChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row gy-2">
            <div class="cols mt-5 bg-secondary">
                <div class="card col m-1 p-2">
                    <div class="card-body" style="height:600px">
                        <h5>Project: Tickets vs Developers</h5>
                        <div id="chartdiv"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row gy-2">
            <div class="cols mt-5 bg-secondary">
                <div class="card col m-1 p-2">
                    <div class="card-body" style="height:600px;overflow-y:auto;">
                        <h5>Project: Tickets vs Developers</h5>
                        <div id="plotlyChart"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <hr />
    <div class="mt-5 ">
        <div class="row">
            @* Projects Table *@
            <div class="col">
                <div class="bg-secondary">
                    <div class="card m-1 p-2">
                        <div class="card-header">
                            <h2>Projects</h2>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive" style="overflow-y:auto;height:600px;">
                                @if (Model.Projects is not null)
                                {
                                <table class="table table-hover">
                                    <th class="">
                                        <tr>
                                            <th>Name</th>
                                            <th>Start Date</th>
                                            <th>End Date</th>
                                            <th>Priority</th>
                                            <th>Action</th>
                                        </tr>
                                    </th>
                                    <tbody>
                                    @foreach (Project project in Model.Projects.OrderByDescending(project => project.EndDate))
                                    {
                                        <tr>
                                            <td><a asp-action="Details" asp-controller="Projects" asp-route-id="@project.Id" style="color: black;"><strong>@project.Name</strong></a></td>
                                            <td><span style="font-size: small;">@project.StartDate.ToString("dd.MM.yyyy")</span></td>
                                            <td><span style="font-size: small;">@project.EndDate.ToString("dd.MM.yyyy")</span></td>
                                            <td><span class="badge bg-dark">@project.ProjectPriority?.Name</span></td>
                                            <td>
                                                <a class="btn btn-sm btn-outline-secondary" asp-action="Details" asp-controller="Projects" asp-route-id="@project.Id"><i class="fs-5 bi-justify"></i></a>
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                                }
                            </div>
                        </div>
                        <div class="card-footer">
                        </div>
                    </div>
                </div>
            </div>
            @* Tickets Table *@
            <div class="col">
                <div class="bg-secondary">
                    <div class="card m-1 p-2">
                        <div class="card-header">
                            <h2>Tickets</h2>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive" style="overflow-y:auto;height:600px;">
                                @if (Model.Tickets is not null)
                                {
                                <table class="table table-hover">
                                    <th class="">
                                        <tr>
                                            <th>Title</th>
                                            <th>Developer</th>
                                            <th>Status</th>
                                            <th>Priority</th>
                                            <th>Date</th>
                                            <th>Action</th>
                                        </tr>
                                    </th>
                                    <tbody>
                                        @foreach (Ticket ticket in Model.Tickets.OrderByDescending(ticket => ticket.Created))
                                        {
                                            <tr>
                                                <td><a asp-action="Details" asp-controller="Tickets" asp-route-id="@ticket.Id" style="color:black; font-size: small;"><strong>@ticket.Title</strong></a> </td>
                                                <td>
                                                    @if (ticket.DeveloperUser is null)
                                                    {
                                                        <span class="badge bg-warning text-dark">Unassigned</span>
                                                    }
                                                    else
                                                    {
                                                        <span style="font-size: small;">@ticket.DeveloperUser.FullName</span>                                                            
                                                    }
                                                </td>
                                                @if (ticket.TicketStatus?.Name == "New")
                                                {
                                                <td><span class="badge bg-success rounded-pill">@ticket.TicketStatus.Name</span></td>
                                                }
                                                else
                                                {
                                                <td><span class="badge bg-secondary rounded-pill">@ticket.TicketStatus?.Name</span></td>
                                                }
                                                <td><span class="badge bg-dark">@ticket.TicketPriority?.Name</span></td>
                                                <td><span style="font-size: small;">@ticket.Created.ToString("dd.MM.yyyy")</span></td>
                                                <td>
                                                    <a class="btn btn-sm btn-outline-secondary" asp-action="Details" asp-controller="Tickets" asp-route-id="@ticket.Id"><i class="fs-5 bi-justify"></i></a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                }
                            </div>
                        </div>
                        <div class="card-footer">
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-2 ">
                <div class="bg-dark">
                    <div class="card m-1 p-2">
                        <div class="card-header">
                            <h2>Members</h2>
                            <hr />
                        </div>
                        <div class="card-body" style="overflow-y:auto;height:600px;background-color:antiquewhite">
                            @if (Model.Members is not null)
                            {
                                foreach (AppUser member in Model.Members)
                                {
                                    <div>
                                        <span style="font-weight: bold">@member.FullName</span>
                                        <h6>@((await RolesService.GetUserRolesAsync(member)).FirstOrDefault())</h6>
                                    </div>
                                    <hr>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <!--Google Charts-->
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>

    <script type="text/javascript">
        google.load("visualization", "1", { packages: ["corechart"] });
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            $.ajax({
                type: "POST",
                url: "/Home/GglProjectPriority",
                data: '{}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    var data = google.visualization.arrayToDataTable(result);

                    //3D Pie
                    var options = {
                        title: 'Project Priority',
                        is3D: true,
                        chartArea: { left: 0,bottom: 15,width: '100%', height: '100%'},
                        legend: { position: 'bottom' }

                    };

                    var chart = new google.visualization.PieChart($("#chart3D")[0]);
                    chart.draw(data, options);
                },
                failure: function (result) {
                    alert(result.d);
                },
                error: function (result) {
                    alert(result.d);
                }
            });
        }
    </script>
    <script type="text/javascript">
        google.load("visualization", "1", { packages: ["corechart"] });
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            $.ajax({
                type: "POST",
                url: "/Home/GglProjectTickets",
                data: '{}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    var data = google.visualization.arrayToDataTable(result);

                    //Donut
                    var options = {
                        title: 'Company Ticket Distribution',
                        pieHole: 0.3,
                        chartArea: { left: 0,bottom: 15,width: '100%', height: '100%'},
                        legend: { position: 'bottom' }
                    };
                    var chart = new google.visualization.PieChart($("#donut")[0]);
                    chart.draw(data, options);
                },
                failure: function (result) {
                    alert(result.d);
                },
                error: function (result) {
                    alert(result.d);
                }
            });
        }
    </script>

    @* Morris Donut Chart *@
    <script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
    <script>

        var morrisDonutData = [{
            label: "Low",
                value: @Model.Tickets?.Where(t=>t.TicketPriority?.Name == nameof(Priorities.Low)).Count()
        }, {
            label: "Medium",
                value: @Model.Tickets?.Where(t=>t.TicketPriority?.Name == nameof(Priorities.Medium)).Count()
        }, {
            label: "High",
                value: @Model.Tickets?.Where(t=>t.TicketPriority?.Name == nameof(Priorities.High)).Count()
        }, {
            label: "Urgent",
                value: @Model.Tickets?.Where(t=>t.TicketPriority?.Name == nameof(Priorities.Urgent)).Count()
        }];


        /*
        Morris: Donut
        */
        if ($('#morrisTicketPriority').get(0)) {
            var donutChart = Morris.Donut({
                resize: true,
                element: 'morrisTicketPriority',
                data: morrisDonutData,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            donutChart.options.data.forEach(function(label, i) {
                var legendItem = $('<span></span>').text( label['label'] + ": " +label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                  .css('backgroundColor', donutChart.options.colors[i])
                  .css('width', '20px')
                  .css('display', 'inline-block')
                  .css('margin', '10px');
                $('#legend').append(legendItem)
            });
        };
    </script>

    <!-- *** Begin Chart JS Pie/Donut *** -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>
    <script>

        var donutChartCanvas = $('#donutChart').get(0).getContext('2d');
        var donutData = {
            labels: [
                '@nameof(TicketStatuses.Development)',
                '@nameof(TicketStatuses.New)',
                '@nameof(TicketStatuses.Resolved)',
                '@nameof(TicketStatuses.Testing)'
            ],
            datasets: [
                {
                    data: [
        @Model.Tickets?.Where(t=> t.TicketStatus?.Name == nameof(TicketStatuses.Development)).Count(),
        @Model.Tickets?.Where(t=> t.TicketStatus?.Name == nameof(TicketStatuses.New)).Count(),
        @Model.Tickets?.Where(t=> t.TicketStatus?.Name == nameof(TicketStatuses.Resolved)).Count(),
        @Model.Tickets?.Where(t=> t.TicketStatus?.Name == nameof(TicketStatuses.Testing)).Count()
                    ],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)'
                    ]
                }
            ]
        };

        var donutOptions = {
            maintainAspectRatio: false,
            responsive: true,
        };
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        new Chart(donutChartCanvas, {
            type: 'doughnut',
            data: donutData,
            options: donutOptions
        });
    </script>
    <!-- *** End Chart JS Donut *** -->

    <!-- *** Begin AM Charts *** -->

    <!-- Resources -->
    <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/charts.js"></script>

    <!-- Chart code -->
    <script>
        $.ajax({
            type: "POST",
            url: "/Home/AmCharts",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                am4core.ready(function() {

                    // Themes begin
                    // Themes end

                     // Create chart instance
                    var chart = am4core.create("chartdiv", am4charts.XYChart);


                    // Add data
                    chart.data = result;

                    // Create axes
                    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
                    categoryAxis.dataFields.category = "project";
                    categoryAxis.numberFormatter.numberFormat = "#";
                    categoryAxis.renderer.inversed = true;
                    categoryAxis.renderer.grid.template.location = 0;
                    categoryAxis.renderer.cellStartLocation = 0.1;
                    categoryAxis.renderer.cellEndLocation = 0.9;

                    var  valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
                    valueAxis.renderer.opposite = true;

                    // Create series
                    function createSeries(field, name) {
                      var series = chart.series.push(new am4charts.ColumnSeries());
                      series.dataFields.valueX = field;
                      series.dataFields.categoryY = "project";
                      series.name = name;
                      series.columns.template.tooltipText = "{name}: [bold]{valueX}[/]";
                      series.columns.template.height = am4core.percent(100);
                      series.sequencedInterpolation = true;

                      var valueLabel = series.bullets.push(new am4charts.LabelBullet());
                      valueLabel.label.text = "{valueX}";
                      valueLabel.label.horizontalCenter = "left";
                      valueLabel.label.dx = 10;
                      valueLabel.label.hideOversized = false;
                      valueLabel.label.truncate = false;

                      var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
                      categoryLabel.label.text = "{name}";
                      categoryLabel.label.horizontalCenter = "right";
                      categoryLabel.label.dx = -10;
                      categoryLabel.label.fill = am4core.color("#fff");
                      categoryLabel.label.hideOversized = false;
                      categoryLabel.label.truncate = false;
                    }

                    createSeries("tickets", "Tickets");
                    createSeries("developers", "Devs");

                }); // end am4core.ready()


            },
            failure: function (result) {
                alert(result.d);
            },
            error: function (result) {
                alert(result.d);
            }
        });
    </script>

    <!-- *** End AM Charts *** -->

    <!--  Plotly Charts  -->
    <!-- Load plotly.js into the DOM -->
    <script src='https://cdn.plot.ly/plotly-2.4.2.min.js'></script>
    <script>
        $.ajax({
            type: "POST",
            url: "/Home/PlotlyBarChart",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                var data = result;

                var layout = {barmode: 'group'};

                Plotly.newPlot('plotlyChart', data, layout);
                },
                failure: function (result) {
                    alert(result.d);
                },
                error: function (result) {
                    alert(result.d);
                }
            });
    </script>
}